// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_OBSERVABLE_OBS_H_
#define FLATBUFFERS_GENERATED_OBSERVABLE_OBS_H_

#include "flatbuffers/flatbuffers.h"

namespace obs {

struct Observable;

struct Observable FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_INPUT = 4
  };
  const flatbuffers::Vector<float> *input() const {
    return GetPointer<const flatbuffers::Vector<float> *>(VT_INPUT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_INPUT) &&
           verifier.VerifyVector(input()) &&
           verifier.EndTable();
  }
};

struct ObservableBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_input(flatbuffers::Offset<flatbuffers::Vector<float>> input) {
    fbb_.AddOffset(Observable::VT_INPUT, input);
  }
  explicit ObservableBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ObservableBuilder &operator=(const ObservableBuilder &);
  flatbuffers::Offset<Observable> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Observable>(end);
    return o;
  }
};

inline flatbuffers::Offset<Observable> CreateObservable(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<float>> input = 0) {
  ObservableBuilder builder_(_fbb);
  builder_.add_input(input);
  return builder_.Finish();
}

inline flatbuffers::Offset<Observable> CreateObservableDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<float> *input = nullptr) {
  return obs::CreateObservable(
      _fbb,
      input ? _fbb.CreateVector<float>(*input) : 0);
}

inline const obs::Observable *GetObservable(const void *buf) {
  return flatbuffers::GetRoot<obs::Observable>(buf);
}

inline const obs::Observable *GetSizePrefixedObservable(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<obs::Observable>(buf);
}

inline bool VerifyObservableBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<obs::Observable>(nullptr);
}

inline bool VerifySizePrefixedObservableBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<obs::Observable>(nullptr);
}

inline void FinishObservableBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<obs::Observable> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedObservableBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<obs::Observable> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace obs

#endif  // FLATBUFFERS_GENERATED_OBSERVABLE_OBS_H_
