// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_GRAPHOUT_G_OUT_H_
#define FLATBUFFERS_GENERATED_GRAPHOUT_G_OUT_H_

#include "flatbuffers/flatbuffers.h"

namespace g_out {

struct GraphOutput;

struct GraphOutput FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ACTION = 4
  };
  const flatbuffers::Vector<int32_t> *action() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_ACTION);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ACTION) &&
           verifier.VerifyVector(action()) &&
           verifier.EndTable();
  }
};

struct GraphOutputBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_action(flatbuffers::Offset<flatbuffers::Vector<int32_t>> action) {
    fbb_.AddOffset(GraphOutput::VT_ACTION, action);
  }
  explicit GraphOutputBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GraphOutputBuilder &operator=(const GraphOutputBuilder &);
  flatbuffers::Offset<GraphOutput> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GraphOutput>(end);
    return o;
  }
};

inline flatbuffers::Offset<GraphOutput> CreateGraphOutput(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<int32_t>> action = 0) {
  GraphOutputBuilder builder_(_fbb);
  builder_.add_action(action);
  return builder_.Finish();
}

inline flatbuffers::Offset<GraphOutput> CreateGraphOutputDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<int32_t> *action = nullptr) {
  return g_out::CreateGraphOutput(
      _fbb,
      action ? _fbb.CreateVector<int32_t>(*action) : 0);
}

inline const g_out::GraphOutput *GetGraphOutput(const void *buf) {
  return flatbuffers::GetRoot<g_out::GraphOutput>(buf);
}

inline const g_out::GraphOutput *GetSizePrefixedGraphOutput(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<g_out::GraphOutput>(buf);
}

inline bool VerifyGraphOutputBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<g_out::GraphOutput>(nullptr);
}

inline bool VerifySizePrefixedGraphOutputBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<g_out::GraphOutput>(nullptr);
}

inline void FinishGraphOutputBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<g_out::GraphOutput> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedGraphOutputBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<g_out::GraphOutput> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace g_out

#endif  // FLATBUFFERS_GENERATED_GRAPHOUT_G_OUT_H_
