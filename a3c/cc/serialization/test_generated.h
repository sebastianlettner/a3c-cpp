// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TEST_SERIALIZATION_TEST_H_
#define FLATBUFFERS_GENERATED_TEST_SERIALIZATION_TEST_H_

#include "flatbuffers/flatbuffers.h"

namespace serialization_test {

struct Structure;

struct Structure FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_X = 4,
    VT_Y = 6,
    VT_Z = 8
  };
  int32_t x() const {
    return GetField<int32_t>(VT_X, 0);
  }
  float y() const {
    return GetField<float>(VT_Y, 0.0f);
  }
  const flatbuffers::Vector<float> *z() const {
    return GetPointer<const flatbuffers::Vector<float> *>(VT_Z);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_X) &&
           VerifyField<float>(verifier, VT_Y) &&
           VerifyOffset(verifier, VT_Z) &&
           verifier.VerifyVector(z()) &&
           verifier.EndTable();
  }
};

struct StructureBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_x(int32_t x) {
    fbb_.AddElement<int32_t>(Structure::VT_X, x, 0);
  }
  void add_y(float y) {
    fbb_.AddElement<float>(Structure::VT_Y, y, 0.0f);
  }
  void add_z(flatbuffers::Offset<flatbuffers::Vector<float>> z) {
    fbb_.AddOffset(Structure::VT_Z, z);
  }
  explicit StructureBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  StructureBuilder &operator=(const StructureBuilder &);
  flatbuffers::Offset<Structure> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Structure>(end);
    return o;
  }
};

inline flatbuffers::Offset<Structure> CreateStructure(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t x = 0,
    float y = 0.0f,
    flatbuffers::Offset<flatbuffers::Vector<float>> z = 0) {
  StructureBuilder builder_(_fbb);
  builder_.add_z(z);
  builder_.add_y(y);
  builder_.add_x(x);
  return builder_.Finish();
}

inline flatbuffers::Offset<Structure> CreateStructureDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t x = 0,
    float y = 0.0f,
    const std::vector<float> *z = nullptr) {
  return serialization_test::CreateStructure(
      _fbb,
      x,
      y,
      z ? _fbb.CreateVector<float>(*z) : 0);
}

inline const serialization_test::Structure *GetStructure(const void *buf) {
  return flatbuffers::GetRoot<serialization_test::Structure>(buf);
}

inline const serialization_test::Structure *GetSizePrefixedStructure(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<serialization_test::Structure>(buf);
}

inline bool VerifyStructureBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<serialization_test::Structure>(nullptr);
}

inline bool VerifySizePrefixedStructureBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<serialization_test::Structure>(nullptr);
}

inline void FinishStructureBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<serialization_test::Structure> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedStructureBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<serialization_test::Structure> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace serialization_test

#endif  // FLATBUFFERS_GENERATED_TEST_SERIALIZATION_TEST_H_
