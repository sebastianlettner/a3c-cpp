// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_OBS_FBS_H_
#define FLATBUFFERS_GENERATED_OBS_FBS_H_

#include "flatbuffers/flatbuffers.h"

namespace fbs {

struct Dict;

struct Entry;

struct Dict FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ENTRIES = 4,
    VT_NUM = 6
  };
  const flatbuffers::Vector<flatbuffers::Offset<Entry>> *entries() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Entry>> *>(VT_ENTRIES);
  }
  int32_t num() const {
    return GetField<int32_t>(VT_NUM, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ENTRIES) &&
           verifier.VerifyVector(entries()) &&
           verifier.VerifyVectorOfTables(entries()) &&
           VerifyField<int32_t>(verifier, VT_NUM) &&
           verifier.EndTable();
  }
};

struct DictBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_entries(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Entry>>> entries) {
    fbb_.AddOffset(Dict::VT_ENTRIES, entries);
  }
  void add_num(int32_t num) {
    fbb_.AddElement<int32_t>(Dict::VT_NUM, num, 0);
  }
  explicit DictBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  DictBuilder &operator=(const DictBuilder &);
  flatbuffers::Offset<Dict> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Dict>(end);
    return o;
  }
};

inline flatbuffers::Offset<Dict> CreateDict(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Entry>>> entries = 0,
    int32_t num = 0) {
  DictBuilder builder_(_fbb);
  builder_.add_num(num);
  builder_.add_entries(entries);
  return builder_.Finish();
}

inline flatbuffers::Offset<Dict> CreateDictDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<Entry>> *entries = nullptr,
    int32_t num = 0) {
  return fbs::CreateDict(
      _fbb,
      entries ? _fbb.CreateVector<flatbuffers::Offset<Entry>>(*entries) : 0,
      num);
}

struct Entry FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_KEY = 4,
    VT_VALUE = 6
  };
  const flatbuffers::String *key() const {
    return GetPointer<const flatbuffers::String *>(VT_KEY);
  }
  bool KeyCompareLessThan(const Entry *o) const {
    return *key() < *o->key();
  }
  int KeyCompareWithValue(const char *val) const {
    return strcmp(key()->c_str(), val);
  }
  const flatbuffers::Vector<float> *value() const {
    return GetPointer<const flatbuffers::Vector<float> *>(VT_VALUE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_KEY) &&
           verifier.VerifyString(key()) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.VerifyVector(value()) &&
           verifier.EndTable();
  }
};

struct EntryBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_key(flatbuffers::Offset<flatbuffers::String> key) {
    fbb_.AddOffset(Entry::VT_KEY, key);
  }
  void add_value(flatbuffers::Offset<flatbuffers::Vector<float>> value) {
    fbb_.AddOffset(Entry::VT_VALUE, value);
  }
  explicit EntryBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  EntryBuilder &operator=(const EntryBuilder &);
  flatbuffers::Offset<Entry> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Entry>(end);
    fbb_.Required(o, Entry::VT_KEY);
    return o;
  }
};

inline flatbuffers::Offset<Entry> CreateEntry(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> key = 0,
    flatbuffers::Offset<flatbuffers::Vector<float>> value = 0) {
  EntryBuilder builder_(_fbb);
  builder_.add_value(value);
  builder_.add_key(key);
  return builder_.Finish();
}

inline flatbuffers::Offset<Entry> CreateEntryDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *key = nullptr,
    const std::vector<float> *value = nullptr) {
  return fbs::CreateEntry(
      _fbb,
      key ? _fbb.CreateString(key) : 0,
      value ? _fbb.CreateVector<float>(*value) : 0);
}

inline const fbs::Dict *GetDict(const void *buf) {
  return flatbuffers::GetRoot<fbs::Dict>(buf);
}

inline const fbs::Dict *GetSizePrefixedDict(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<fbs::Dict>(buf);
}

inline bool VerifyDictBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fbs::Dict>(nullptr);
}

inline bool VerifySizePrefixedDictBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fbs::Dict>(nullptr);
}

inline void FinishDictBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<fbs::Dict> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedDictBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<fbs::Dict> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace fbs

#endif  // FLATBUFFERS_GENERATED_OBS_FBS_H_
